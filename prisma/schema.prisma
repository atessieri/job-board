// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  COMPANY
  WORKER
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  username      String?    @unique
  emailVerified DateTime?
  imagePath     String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  job           Job[]
  role          Role       @default(WORKER)
  application   Application[]
}

model VerificationToken {
  identifier String
  token      String        @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String         @id @default(cuid())
  sessionToken String         @unique
  userId       String
  expires      DateTime
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime        @default(now())
  title       String
  description String
  salary      Decimal         @db.Decimal(9,2)
  location    String
  published   Boolean      
  author      User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  application Application[]
  @@index([id])
}

model Application {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime        @default(now())
  coverLetter String
  job         Job             @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId       Int
  author      User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  @@index([id])
  @@unique([authorId, jobId])
}